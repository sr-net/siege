# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Boardgame {
  uuid: ID!
  type: GAME_TYPE!
  name: String!

  """Link to boardgamegeek"""
  url: String
  rulebook: String
  minPlayers: Int!
  maxPlayers: Int!
  resultSchema: JSONObject!
}

type Club {
  uuid: ID!
  name: String!
  members: [User!]!

  """A club owner must be a claimed player"""
  owner: User!
}

type Connection {
  uuid: ID!
  type: ConnectionService!
  user: User!
  serviceId: ID!
  email: String!
  image: String!
}

enum ConnectionService {
  GOOGLE
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

enum GAME_TYPE {
  COLLABORATIVE
  COMPETITIVE
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Match {
  uuid: ID!
  club: Club!
  players: [User!]!
  winners: [User!]!
  game: Boardgame!
  results: JSONObject!
  date: DateTime!
}

type Mutation {
  addBoardgame(minPlayers: Int, rulebook: String, type: GAME_TYPE, url: String, resultSchema: JSONObject!, maxPlayers: Int!, name: String!): Boardgame!
  addClub(name: String!): Club!
  addMatch(club: ID, game: ID!, results: JSONObject!): Match!
  addUser(name: String!): User!
  useUser(uuid: String!): Boolean!
}

type Query {
  boardgame(uuid: ID!): Boardgame
  club(uuid: ID!): Club
  match(uuid: ID!): Match
  user(uuid: ID!): User
  viewer: User
}

type User {
  uuid: ID!
  name: String!
  clubs: [Club!]!
  connections: [Connection!]!
  mainConnectionUuid: ID
}
